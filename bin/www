#!/usr/bin/env  node (环境节点)

/**
*   Module dependencies 模块依赖关系
*/

var app = require('../app'),//引入app
    debug = require('debug')('ZOA:server'),
    http = require('http');

/**
 *  Get port from environment and store in Express.//从环境中获取端口并快速存储。

 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);

 /**
 * Create HTTP server.//创建HTTP服务器
 */

 var server = http.createServer(app);
 
/**
 * Listen on provided port, on all network interfaces.//在所有网络接口上监听所提供的端口。
 * 
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.将端口标准化为数字、字符串或false。
 */

 function normalizePort(val){
     var port = parseInt(val, 10);

     if(isNaN(port)){
        //  named pipe命名管道
        return val;
     }
     if(port >= 0){
        //  port number端口号
        return port;
     }

     return false;
 }

/**
 * Event listener for HTTP server "error" event.HTTP服务器“错误”事件的事件侦听器。
 */
function onError(error){
    if(error.sycall !== 'listen'){
        throw error;
    }

    var bind = typeof port ==='string'
        ? 'Pipe' + port
        : 'port' + port;
    // handle specific listen errors with friendly messages用友好消息处理特定的监听错误
    switch(error.code){
        case 'EACCES':
            console.error(bind + 'requires elevated privileges');//需要提升权限
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + 'is already in use');//已经在使用
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event。HTTP服务器“侦听”事件的事件侦听器。
 */

 function onListening(){
     var addr = server.address();
     var bind = typeof addr === 'string'
        ? 'pipe' + addr
        : 'port' + addr.port;
        debug('Listening on' + bind);

 }
